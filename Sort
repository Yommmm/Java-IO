public static void quickSort(int[] arr, int left, int right) {
		if (left < right) {
			int i = left;
			int j = right;
			int x = arr[i];

			while (i < j) {
				while (i < j && arr[j] > x) 
					j--;
				if (i < j) 
					arr[i++] = arr[j];
				while (i < j && arr[i] < x) 
					i++;
				if (i < j) 
					arr[j--] = arr[i];
			}
			arr[i] = x;
			quickSort(arr, left, i - 1);
			quickSort(arr, i + 1, right);
		}
	}

	public static void quickSort1(int[] arr, int l, int r) {
		if (l < r) {
			int i, j, x;

			i = l;
			j = r;
			x = arr[i];
			while (i < j) {
				while (i < j && arr[j] > x)
					j--; // 从右向左找第一个小于x的数
				if (i < j)
					arr[i++] = arr[j];
				while (i < j && arr[i] < x)
					i++; // 从左向右找第一个大于x的数
				if (i < j)
					arr[j--] = arr[i];
			}
			arr[i] = x;
			quickSort1(arr, l, i - 1); /* 递归调用 */
			quickSort1(arr, i + 1, r); /* 递归调用 */
		}
	}
  ### 快排
  
  public static void bubbleSort1(int[] arr) {
		for (int i = arr.length - 1; i > 0; i--) {
			for (int j = 0; j < i; j++) {
				if (arr[j] > arr[j + 1]) {
					int temp = arr[j];
					arr[j] = arr[j + 1];
					arr[j + 1] = temp;
				}
			}
		}
	}

	public static void bubbleSort2(int[] arr) {
		for (int i = arr.length - 1; i > 0; i--) {
			int flag = 0;
			for (int j = 0; j < i; j++) {
				if (arr[j] > arr[j + 1]) {
					int temp = arr[j];
					arr[j] = arr[j + 1];
					arr[j + 1] = temp;
				}
			}
			if (flag == 1) {
				break;
			}
		}
	}
	
	public static void bubbleSort3(int[] arr){
		int left = 0;
		int right = arr.length - 1;
		
		while(left < right){
			for(int i = 0; i < arr.length - 1 -i; i++){
				int top = i;
				int end = arr.length - 1 -i;
				
				if(arr[top] > arr[top + 1]){
					int temp = arr[top];
					arr[top] = arr[top + 1];
					arr[top + 1] = temp;
				}
				if(arr[end] < arr[end -1]){
					int temp = arr[end];
					arr[end] = arr[end - 1];
					arr[end - 1] = temp;
				}
			}
			left ++;
			right --;
		}
		
	}
  
